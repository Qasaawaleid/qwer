// Code generated by ent, DO NOT EDIT.

package subscriptiontier

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/go-apps/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldName, v))
}

// BaseCredits applies equality check predicate on the "base_credits" field. It's identical to BaseCreditsEQ.
func BaseCredits(v int32) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldBaseCredits, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldContainsFold(FieldName, v))
}

// BaseCreditsEQ applies the EQ predicate on the "base_credits" field.
func BaseCreditsEQ(v int32) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldBaseCredits, v))
}

// BaseCreditsNEQ applies the NEQ predicate on the "base_credits" field.
func BaseCreditsNEQ(v int32) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNEQ(FieldBaseCredits, v))
}

// BaseCreditsIn applies the In predicate on the "base_credits" field.
func BaseCreditsIn(vs ...int32) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldIn(FieldBaseCredits, vs...))
}

// BaseCreditsNotIn applies the NotIn predicate on the "base_credits" field.
func BaseCreditsNotIn(vs ...int32) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNotIn(FieldBaseCredits, vs...))
}

// BaseCreditsGT applies the GT predicate on the "base_credits" field.
func BaseCreditsGT(v int32) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGT(FieldBaseCredits, v))
}

// BaseCreditsGTE applies the GTE predicate on the "base_credits" field.
func BaseCreditsGTE(v int32) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGTE(FieldBaseCredits, v))
}

// BaseCreditsLT applies the LT predicate on the "base_credits" field.
func BaseCreditsLT(v int32) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLT(FieldBaseCredits, v))
}

// BaseCreditsLTE applies the LTE predicate on the "base_credits" field.
func BaseCreditsLTE(v int32) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLTE(FieldBaseCredits, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasSubscriptions applies the HasEdge predicate on the "subscriptions" edge.
func HasSubscriptions() predicate.SubscriptionTier {
	return predicate.SubscriptionTier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionsTable, SubscriptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionsWith applies the HasEdge predicate on the "subscriptions" edge with a given conditions (other predicates).
func HasSubscriptionsWith(preds ...predicate.Subscription) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscriptionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionsTable, SubscriptionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscriptionTier) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscriptionTier) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscriptionTier) predicate.SubscriptionTier {
	return predicate.SubscriptionTier(func(s *sql.Selector) {
		p(s.Not())
	})
}
