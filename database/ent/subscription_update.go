// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/go-apps/database/ent/predicate"
	"github.com/stablecog/go-apps/database/ent/subscription"
	"github.com/stablecog/go-apps/database/ent/subscriptiontier"
	"github.com/stablecog/go-apps/database/ent/user"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUserID sets the "user_id" field.
func (su *SubscriptionUpdate) SetUserID(u uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetSubscriptionTierID sets the "subscription_tier_id" field.
func (su *SubscriptionUpdate) SetSubscriptionTierID(u uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetSubscriptionTierID(u)
	return su
}

// SetPaidStartedAt sets the "paid_started_at" field.
func (su *SubscriptionUpdate) SetPaidStartedAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetPaidStartedAt(t)
	return su
}

// SetNillablePaidStartedAt sets the "paid_started_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillablePaidStartedAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetPaidStartedAt(*t)
	}
	return su
}

// ClearPaidStartedAt clears the value of the "paid_started_at" field.
func (su *SubscriptionUpdate) ClearPaidStartedAt() *SubscriptionUpdate {
	su.mutation.ClearPaidStartedAt()
	return su
}

// SetPaidCancelledAt sets the "paid_cancelled_at" field.
func (su *SubscriptionUpdate) SetPaidCancelledAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetPaidCancelledAt(t)
	return su
}

// SetNillablePaidCancelledAt sets the "paid_cancelled_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillablePaidCancelledAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetPaidCancelledAt(*t)
	}
	return su
}

// ClearPaidCancelledAt clears the value of the "paid_cancelled_at" field.
func (su *SubscriptionUpdate) ClearPaidCancelledAt() *SubscriptionUpdate {
	su.mutation.ClearPaidCancelledAt()
	return su
}

// SetPaidExpiresAt sets the "paid_expires_at" field.
func (su *SubscriptionUpdate) SetPaidExpiresAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetPaidExpiresAt(t)
	return su
}

// SetNillablePaidExpiresAt sets the "paid_expires_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillablePaidExpiresAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetPaidExpiresAt(*t)
	}
	return su
}

// ClearPaidExpiresAt clears the value of the "paid_expires_at" field.
func (su *SubscriptionUpdate) ClearPaidExpiresAt() *SubscriptionUpdate {
	su.mutation.ClearPaidExpiresAt()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscriptionUpdate) SetUpdatedAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *SubscriptionUpdate) SetUser(u *User) *SubscriptionUpdate {
	return su.SetUserID(u.ID)
}

// SetSubscriptionTier sets the "subscription_tier" edge to the SubscriptionTier entity.
func (su *SubscriptionUpdate) SetSubscriptionTier(s *SubscriptionTier) *SubscriptionUpdate {
	return su.SetSubscriptionTierID(s.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *SubscriptionUpdate) ClearUser() *SubscriptionUpdate {
	su.mutation.ClearUser()
	return su
}

// ClearSubscriptionTier clears the "subscription_tier" edge to the SubscriptionTier entity.
func (su *SubscriptionUpdate) ClearSubscriptionTier() *SubscriptionUpdate {
	su.mutation.ClearSubscriptionTier()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks[int, SubscriptionMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscriptionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubscriptionUpdate) check() error {
	if _, ok := su.mutation.UserID(); su.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscription.user"`)
	}
	if _, ok := su.mutation.SubscriptionTierID(); su.mutation.SubscriptionTierCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscription.subscription_tier"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SubscriptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscription.Table,
			Columns: subscription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subscription.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.PaidStartedAt(); ok {
		_spec.SetField(subscription.FieldPaidStartedAt, field.TypeTime, value)
	}
	if su.mutation.PaidStartedAtCleared() {
		_spec.ClearField(subscription.FieldPaidStartedAt, field.TypeTime)
	}
	if value, ok := su.mutation.PaidCancelledAt(); ok {
		_spec.SetField(subscription.FieldPaidCancelledAt, field.TypeTime, value)
	}
	if su.mutation.PaidCancelledAtCleared() {
		_spec.ClearField(subscription.FieldPaidCancelledAt, field.TypeTime)
	}
	if value, ok := su.mutation.PaidExpiresAt(); ok {
		_spec.SetField(subscription.FieldPaidExpiresAt, field.TypeTime, value)
	}
	if su.mutation.PaidExpiresAtCleared() {
		_spec.ClearField(subscription.FieldPaidExpiresAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscription.UserTable,
			Columns: []string{subscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscription.UserTable,
			Columns: []string{subscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SubscriptionTierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.SubscriptionTierTable,
			Columns: []string{subscription.SubscriptionTierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscriptiontier.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SubscriptionTierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.SubscriptionTierTable,
			Columns: []string{subscription.SubscriptionTierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscriptiontier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscriptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (suo *SubscriptionUpdateOne) SetUserID(u uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetSubscriptionTierID sets the "subscription_tier_id" field.
func (suo *SubscriptionUpdateOne) SetSubscriptionTierID(u uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetSubscriptionTierID(u)
	return suo
}

// SetPaidStartedAt sets the "paid_started_at" field.
func (suo *SubscriptionUpdateOne) SetPaidStartedAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetPaidStartedAt(t)
	return suo
}

// SetNillablePaidStartedAt sets the "paid_started_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillablePaidStartedAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetPaidStartedAt(*t)
	}
	return suo
}

// ClearPaidStartedAt clears the value of the "paid_started_at" field.
func (suo *SubscriptionUpdateOne) ClearPaidStartedAt() *SubscriptionUpdateOne {
	suo.mutation.ClearPaidStartedAt()
	return suo
}

// SetPaidCancelledAt sets the "paid_cancelled_at" field.
func (suo *SubscriptionUpdateOne) SetPaidCancelledAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetPaidCancelledAt(t)
	return suo
}

// SetNillablePaidCancelledAt sets the "paid_cancelled_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillablePaidCancelledAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetPaidCancelledAt(*t)
	}
	return suo
}

// ClearPaidCancelledAt clears the value of the "paid_cancelled_at" field.
func (suo *SubscriptionUpdateOne) ClearPaidCancelledAt() *SubscriptionUpdateOne {
	suo.mutation.ClearPaidCancelledAt()
	return suo
}

// SetPaidExpiresAt sets the "paid_expires_at" field.
func (suo *SubscriptionUpdateOne) SetPaidExpiresAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetPaidExpiresAt(t)
	return suo
}

// SetNillablePaidExpiresAt sets the "paid_expires_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillablePaidExpiresAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetPaidExpiresAt(*t)
	}
	return suo
}

// ClearPaidExpiresAt clears the value of the "paid_expires_at" field.
func (suo *SubscriptionUpdateOne) ClearPaidExpiresAt() *SubscriptionUpdateOne {
	suo.mutation.ClearPaidExpiresAt()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscriptionUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *SubscriptionUpdateOne) SetUser(u *User) *SubscriptionUpdateOne {
	return suo.SetUserID(u.ID)
}

// SetSubscriptionTier sets the "subscription_tier" edge to the SubscriptionTier entity.
func (suo *SubscriptionUpdateOne) SetSubscriptionTier(s *SubscriptionTier) *SubscriptionUpdateOne {
	return suo.SetSubscriptionTierID(s.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *SubscriptionUpdateOne) ClearUser() *SubscriptionUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// ClearSubscriptionTier clears the "subscription_tier" edge to the SubscriptionTier entity.
func (suo *SubscriptionUpdateOne) ClearSubscriptionTier() *SubscriptionUpdateOne {
	suo.mutation.ClearSubscriptionTier()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	suo.defaults()
	return withHooks[*Subscription, SubscriptionMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscriptionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubscriptionUpdateOne) check() error {
	if _, ok := suo.mutation.UserID(); suo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscription.user"`)
	}
	if _, ok := suo.mutation.SubscriptionTierID(); suo.mutation.SubscriptionTierCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscription.subscription_tier"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SubscriptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriptionUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscription.Table,
			Columns: subscription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subscription.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.PaidStartedAt(); ok {
		_spec.SetField(subscription.FieldPaidStartedAt, field.TypeTime, value)
	}
	if suo.mutation.PaidStartedAtCleared() {
		_spec.ClearField(subscription.FieldPaidStartedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.PaidCancelledAt(); ok {
		_spec.SetField(subscription.FieldPaidCancelledAt, field.TypeTime, value)
	}
	if suo.mutation.PaidCancelledAtCleared() {
		_spec.ClearField(subscription.FieldPaidCancelledAt, field.TypeTime)
	}
	if value, ok := suo.mutation.PaidExpiresAt(); ok {
		_spec.SetField(subscription.FieldPaidExpiresAt, field.TypeTime, value)
	}
	if suo.mutation.PaidExpiresAtCleared() {
		_spec.ClearField(subscription.FieldPaidExpiresAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscription.UserTable,
			Columns: []string{subscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscription.UserTable,
			Columns: []string{subscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SubscriptionTierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.SubscriptionTierTable,
			Columns: []string{subscription.SubscriptionTierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscriptiontier.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SubscriptionTierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.SubscriptionTierTable,
			Columns: []string{subscription.SubscriptionTierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscriptiontier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
