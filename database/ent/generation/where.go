// Code generated by ent, DO NOT EDIT.

package generation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/go-apps/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldID, id))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldWidth, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldHeight, v))
}

// InterferenceSteps applies equality check predicate on the "interference_steps" field. It's identical to InterferenceStepsEQ.
func InterferenceSteps(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldInterferenceSteps, v))
}

// GuidanceScale applies equality check predicate on the "guidance_scale" field. It's identical to GuidanceScaleEQ.
func GuidanceScale(v float32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldGuidanceScale, v))
}

// Seed applies equality check predicate on the "seed" field. It's identical to SeedEQ.
func Seed(v int) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldSeed, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldDurationMs, v))
}

// FailureReason applies equality check predicate on the "failure_reason" field. It's identical to FailureReasonEQ.
func FailureReason(v string) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldFailureReason, v))
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldCountryCode, v))
}

// PromptID applies equality check predicate on the "prompt_id" field. It's identical to PromptIDEQ.
func PromptID(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldPromptID, v))
}

// NegativePromptID applies equality check predicate on the "negative_prompt_id" field. It's identical to NegativePromptIDEQ.
func NegativePromptID(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldNegativePromptID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldModelID, v))
}

// SchedulerID applies equality check predicate on the "scheduler_id" field. It's identical to SchedulerIDEQ.
func SchedulerID(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldSchedulerID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldUserID, v))
}

// DeviceInfoID applies equality check predicate on the "device_info_id" field. It's identical to DeviceInfoIDEQ.
func DeviceInfoID(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldDeviceInfoID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldUpdatedAt, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int32) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int32) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldWidth, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int32) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int32) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldHeight, v))
}

// InterferenceStepsEQ applies the EQ predicate on the "interference_steps" field.
func InterferenceStepsEQ(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldInterferenceSteps, v))
}

// InterferenceStepsNEQ applies the NEQ predicate on the "interference_steps" field.
func InterferenceStepsNEQ(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldInterferenceSteps, v))
}

// InterferenceStepsIn applies the In predicate on the "interference_steps" field.
func InterferenceStepsIn(vs ...int32) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldInterferenceSteps, vs...))
}

// InterferenceStepsNotIn applies the NotIn predicate on the "interference_steps" field.
func InterferenceStepsNotIn(vs ...int32) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldInterferenceSteps, vs...))
}

// InterferenceStepsGT applies the GT predicate on the "interference_steps" field.
func InterferenceStepsGT(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldInterferenceSteps, v))
}

// InterferenceStepsGTE applies the GTE predicate on the "interference_steps" field.
func InterferenceStepsGTE(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldInterferenceSteps, v))
}

// InterferenceStepsLT applies the LT predicate on the "interference_steps" field.
func InterferenceStepsLT(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldInterferenceSteps, v))
}

// InterferenceStepsLTE applies the LTE predicate on the "interference_steps" field.
func InterferenceStepsLTE(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldInterferenceSteps, v))
}

// GuidanceScaleEQ applies the EQ predicate on the "guidance_scale" field.
func GuidanceScaleEQ(v float32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldGuidanceScale, v))
}

// GuidanceScaleNEQ applies the NEQ predicate on the "guidance_scale" field.
func GuidanceScaleNEQ(v float32) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldGuidanceScale, v))
}

// GuidanceScaleIn applies the In predicate on the "guidance_scale" field.
func GuidanceScaleIn(vs ...float32) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldGuidanceScale, vs...))
}

// GuidanceScaleNotIn applies the NotIn predicate on the "guidance_scale" field.
func GuidanceScaleNotIn(vs ...float32) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldGuidanceScale, vs...))
}

// GuidanceScaleGT applies the GT predicate on the "guidance_scale" field.
func GuidanceScaleGT(v float32) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldGuidanceScale, v))
}

// GuidanceScaleGTE applies the GTE predicate on the "guidance_scale" field.
func GuidanceScaleGTE(v float32) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldGuidanceScale, v))
}

// GuidanceScaleLT applies the LT predicate on the "guidance_scale" field.
func GuidanceScaleLT(v float32) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldGuidanceScale, v))
}

// GuidanceScaleLTE applies the LTE predicate on the "guidance_scale" field.
func GuidanceScaleLTE(v float32) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldGuidanceScale, v))
}

// SeedEQ applies the EQ predicate on the "seed" field.
func SeedEQ(v int) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldSeed, v))
}

// SeedNEQ applies the NEQ predicate on the "seed" field.
func SeedNEQ(v int) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldSeed, v))
}

// SeedIn applies the In predicate on the "seed" field.
func SeedIn(vs ...int) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldSeed, vs...))
}

// SeedNotIn applies the NotIn predicate on the "seed" field.
func SeedNotIn(vs ...int) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldSeed, vs...))
}

// SeedGT applies the GT predicate on the "seed" field.
func SeedGT(v int) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldSeed, v))
}

// SeedGTE applies the GTE predicate on the "seed" field.
func SeedGTE(v int) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldSeed, v))
}

// SeedLT applies the LT predicate on the "seed" field.
func SeedLT(v int) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldSeed, v))
}

// SeedLTE applies the LTE predicate on the "seed" field.
func SeedLTE(v int) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldSeed, v))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int32) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int32) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int32) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldDurationMs, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldStatus, vs...))
}

// FailureReasonEQ applies the EQ predicate on the "failure_reason" field.
func FailureReasonEQ(v string) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldFailureReason, v))
}

// FailureReasonNEQ applies the NEQ predicate on the "failure_reason" field.
func FailureReasonNEQ(v string) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldFailureReason, v))
}

// FailureReasonIn applies the In predicate on the "failure_reason" field.
func FailureReasonIn(vs ...string) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldFailureReason, vs...))
}

// FailureReasonNotIn applies the NotIn predicate on the "failure_reason" field.
func FailureReasonNotIn(vs ...string) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldFailureReason, vs...))
}

// FailureReasonGT applies the GT predicate on the "failure_reason" field.
func FailureReasonGT(v string) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldFailureReason, v))
}

// FailureReasonGTE applies the GTE predicate on the "failure_reason" field.
func FailureReasonGTE(v string) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldFailureReason, v))
}

// FailureReasonLT applies the LT predicate on the "failure_reason" field.
func FailureReasonLT(v string) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldFailureReason, v))
}

// FailureReasonLTE applies the LTE predicate on the "failure_reason" field.
func FailureReasonLTE(v string) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldFailureReason, v))
}

// FailureReasonContains applies the Contains predicate on the "failure_reason" field.
func FailureReasonContains(v string) predicate.Generation {
	return predicate.Generation(sql.FieldContains(FieldFailureReason, v))
}

// FailureReasonHasPrefix applies the HasPrefix predicate on the "failure_reason" field.
func FailureReasonHasPrefix(v string) predicate.Generation {
	return predicate.Generation(sql.FieldHasPrefix(FieldFailureReason, v))
}

// FailureReasonHasSuffix applies the HasSuffix predicate on the "failure_reason" field.
func FailureReasonHasSuffix(v string) predicate.Generation {
	return predicate.Generation(sql.FieldHasSuffix(FieldFailureReason, v))
}

// FailureReasonEqualFold applies the EqualFold predicate on the "failure_reason" field.
func FailureReasonEqualFold(v string) predicate.Generation {
	return predicate.Generation(sql.FieldEqualFold(FieldFailureReason, v))
}

// FailureReasonContainsFold applies the ContainsFold predicate on the "failure_reason" field.
func FailureReasonContainsFold(v string) predicate.Generation {
	return predicate.Generation(sql.FieldContainsFold(FieldFailureReason, v))
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldCountryCode, v))
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldCountryCode, v))
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldCountryCode, vs...))
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldCountryCode, vs...))
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldCountryCode, v))
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldCountryCode, v))
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldCountryCode, v))
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldCountryCode, v))
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.Generation {
	return predicate.Generation(sql.FieldContains(FieldCountryCode, v))
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.Generation {
	return predicate.Generation(sql.FieldHasPrefix(FieldCountryCode, v))
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.Generation {
	return predicate.Generation(sql.FieldHasSuffix(FieldCountryCode, v))
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.Generation {
	return predicate.Generation(sql.FieldEqualFold(FieldCountryCode, v))
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.Generation {
	return predicate.Generation(sql.FieldContainsFold(FieldCountryCode, v))
}

// PromptIDEQ applies the EQ predicate on the "prompt_id" field.
func PromptIDEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldPromptID, v))
}

// PromptIDNEQ applies the NEQ predicate on the "prompt_id" field.
func PromptIDNEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldPromptID, v))
}

// PromptIDIn applies the In predicate on the "prompt_id" field.
func PromptIDIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldPromptID, vs...))
}

// PromptIDNotIn applies the NotIn predicate on the "prompt_id" field.
func PromptIDNotIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldPromptID, vs...))
}

// NegativePromptIDEQ applies the EQ predicate on the "negative_prompt_id" field.
func NegativePromptIDEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldNegativePromptID, v))
}

// NegativePromptIDNEQ applies the NEQ predicate on the "negative_prompt_id" field.
func NegativePromptIDNEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldNegativePromptID, v))
}

// NegativePromptIDIn applies the In predicate on the "negative_prompt_id" field.
func NegativePromptIDIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldNegativePromptID, vs...))
}

// NegativePromptIDNotIn applies the NotIn predicate on the "negative_prompt_id" field.
func NegativePromptIDNotIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldNegativePromptID, vs...))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldModelID, vs...))
}

// SchedulerIDEQ applies the EQ predicate on the "scheduler_id" field.
func SchedulerIDEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldSchedulerID, v))
}

// SchedulerIDNEQ applies the NEQ predicate on the "scheduler_id" field.
func SchedulerIDNEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldSchedulerID, v))
}

// SchedulerIDIn applies the In predicate on the "scheduler_id" field.
func SchedulerIDIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldSchedulerID, vs...))
}

// SchedulerIDNotIn applies the NotIn predicate on the "scheduler_id" field.
func SchedulerIDNotIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldSchedulerID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldUserID, vs...))
}

// DeviceInfoIDEQ applies the EQ predicate on the "device_info_id" field.
func DeviceInfoIDEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldDeviceInfoID, v))
}

// DeviceInfoIDNEQ applies the NEQ predicate on the "device_info_id" field.
func DeviceInfoIDNEQ(v uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldDeviceInfoID, v))
}

// DeviceInfoIDIn applies the In predicate on the "device_info_id" field.
func DeviceInfoIDIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldDeviceInfoID, vs...))
}

// DeviceInfoIDNotIn applies the NotIn predicate on the "device_info_id" field.
func DeviceInfoIDNotIn(vs ...uuid.UUID) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldDeviceInfoID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Generation {
	return predicate.Generation(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDeviceInfo applies the HasEdge predicate on the "device_info" edge.
func HasDeviceInfo() predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceInfoTable, DeviceInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceInfoWith applies the HasEdge predicate on the "device_info" edge with a given conditions (other predicates).
func HasDeviceInfoWith(preds ...predicate.DeviceInfo) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeviceInfoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceInfoTable, DeviceInfoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchedulers applies the HasEdge predicate on the "schedulers" edge.
func HasSchedulers() predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SchedulersTable, SchedulersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSchedulersWith applies the HasEdge predicate on the "schedulers" edge with a given conditions (other predicates).
func HasSchedulersWith(preds ...predicate.Scheduler) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SchedulersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SchedulersTable, SchedulersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrompts applies the HasEdge predicate on the "prompts" edge.
func HasPrompts() predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PromptsTable, PromptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPromptsWith applies the HasEdge predicate on the "prompts" edge with a given conditions (other predicates).
func HasPromptsWith(preds ...predicate.Prompt) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PromptsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PromptsTable, PromptsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNegativePrompts applies the HasEdge predicate on the "negative_prompts" edge.
func HasNegativePrompts() predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NegativePromptsTable, NegativePromptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNegativePromptsWith applies the HasEdge predicate on the "negative_prompts" edge with a given conditions (other predicates).
func HasNegativePromptsWith(preds ...predicate.NegativePrompt) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NegativePromptsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NegativePromptsTable, NegativePromptsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenerationModels applies the HasEdge predicate on the "generation_models" edge.
func HasGenerationModels() predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GenerationModelsTable, GenerationModelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenerationModelsWith applies the HasEdge predicate on the "generation_models" edge with a given conditions (other predicates).
func HasGenerationModelsWith(preds ...predicate.GenerationModel) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GenerationModelsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GenerationModelsTable, GenerationModelsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenerationOutputs applies the HasEdge predicate on the "generation_outputs" edge.
func HasGenerationOutputs() predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GenerationOutputsTable, GenerationOutputsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenerationOutputsWith applies the HasEdge predicate on the "generation_outputs" edge with a given conditions (other predicates).
func HasGenerationOutputsWith(preds ...predicate.GenerationOutput) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GenerationOutputsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GenerationOutputsTable, GenerationOutputsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Generation) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Generation) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Generation) predicate.Generation {
	return predicate.Generation(func(s *sql.Selector) {
		p(s.Not())
	})
}
