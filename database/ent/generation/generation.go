// Code generated by ent, DO NOT EDIT.

package generation

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the generation type in the database.
	Label = "generation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldNumInterferenceSteps holds the string denoting the num_interference_steps field in the database.
	FieldNumInterferenceSteps = "num_interference_steps"
	// FieldGuidanceScale holds the string denoting the guidance_scale field in the database.
	FieldGuidanceScale = "guidance_scale"
	// FieldSeed holds the string denoting the seed field in the database.
	FieldSeed = "seed"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFailureReason holds the string denoting the failure_reason field in the database.
	FieldFailureReason = "failure_reason"
	// FieldCountryCode holds the string denoting the country_code field in the database.
	FieldCountryCode = "country_code"
	// FieldIsSubmittedToGallery holds the string denoting the is_submitted_to_gallery field in the database.
	FieldIsSubmittedToGallery = "is_submitted_to_gallery"
	// FieldIsPublic holds the string denoting the is_public field in the database.
	FieldIsPublic = "is_public"
	// FieldInitImageURL holds the string denoting the init_image_url field in the database.
	FieldInitImageURL = "init_image_url"
	// FieldPromptID holds the string denoting the prompt_id field in the database.
	FieldPromptID = "prompt_id"
	// FieldNegativePromptID holds the string denoting the negative_prompt_id field in the database.
	FieldNegativePromptID = "negative_prompt_id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldSchedulerID holds the string denoting the scheduler_id field in the database.
	FieldSchedulerID = "scheduler_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldDeviceInfoID holds the string denoting the device_info_id field in the database.
	FieldDeviceInfoID = "device_info_id"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDeviceInfo holds the string denoting the device_info edge name in mutations.
	EdgeDeviceInfo = "device_info"
	// EdgeSchedulers holds the string denoting the schedulers edge name in mutations.
	EdgeSchedulers = "schedulers"
	// EdgePrompts holds the string denoting the prompts edge name in mutations.
	EdgePrompts = "prompts"
	// EdgeNegativePrompts holds the string denoting the negative_prompts edge name in mutations.
	EdgeNegativePrompts = "negative_prompts"
	// EdgeGenerationModels holds the string denoting the generation_models edge name in mutations.
	EdgeGenerationModels = "generation_models"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeGenerationOutputs holds the string denoting the generation_outputs edge name in mutations.
	EdgeGenerationOutputs = "generation_outputs"
	// Table holds the table name of the generation in the database.
	Table = "generations"
	// DeviceInfoTable is the table that holds the device_info relation/edge.
	DeviceInfoTable = "generations"
	// DeviceInfoInverseTable is the table name for the DeviceInfo entity.
	// It exists in this package in order to avoid circular dependency with the "deviceinfo" package.
	DeviceInfoInverseTable = "device_info"
	// DeviceInfoColumn is the table column denoting the device_info relation/edge.
	DeviceInfoColumn = "device_info_id"
	// SchedulersTable is the table that holds the schedulers relation/edge.
	SchedulersTable = "generations"
	// SchedulersInverseTable is the table name for the Scheduler entity.
	// It exists in this package in order to avoid circular dependency with the "scheduler" package.
	SchedulersInverseTable = "schedulers"
	// SchedulersColumn is the table column denoting the schedulers relation/edge.
	SchedulersColumn = "scheduler_id"
	// PromptsTable is the table that holds the prompts relation/edge.
	PromptsTable = "generations"
	// PromptsInverseTable is the table name for the Prompt entity.
	// It exists in this package in order to avoid circular dependency with the "prompt" package.
	PromptsInverseTable = "prompts"
	// PromptsColumn is the table column denoting the prompts relation/edge.
	PromptsColumn = "prompt_id"
	// NegativePromptsTable is the table that holds the negative_prompts relation/edge.
	NegativePromptsTable = "generations"
	// NegativePromptsInverseTable is the table name for the NegativePrompt entity.
	// It exists in this package in order to avoid circular dependency with the "negativeprompt" package.
	NegativePromptsInverseTable = "negative_prompts"
	// NegativePromptsColumn is the table column denoting the negative_prompts relation/edge.
	NegativePromptsColumn = "negative_prompt_id"
	// GenerationModelsTable is the table that holds the generation_models relation/edge.
	GenerationModelsTable = "generations"
	// GenerationModelsInverseTable is the table name for the GenerationModel entity.
	// It exists in this package in order to avoid circular dependency with the "generationmodel" package.
	GenerationModelsInverseTable = "generation_models"
	// GenerationModelsColumn is the table column denoting the generation_models relation/edge.
	GenerationModelsColumn = "model_id"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "generations"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
	// GenerationOutputsTable is the table that holds the generation_outputs relation/edge.
	GenerationOutputsTable = "generation_outputs"
	// GenerationOutputsInverseTable is the table name for the GenerationOutput entity.
	// It exists in this package in order to avoid circular dependency with the "generationoutput" package.
	GenerationOutputsInverseTable = "generation_outputs"
	// GenerationOutputsColumn is the table column denoting the generation_outputs relation/edge.
	GenerationOutputsColumn = "generation_id"
)

// Columns holds all SQL columns for generation fields.
var Columns = []string{
	FieldID,
	FieldWidth,
	FieldHeight,
	FieldNumInterferenceSteps,
	FieldGuidanceScale,
	FieldSeed,
	FieldStatus,
	FieldFailureReason,
	FieldCountryCode,
	FieldIsSubmittedToGallery,
	FieldIsPublic,
	FieldInitImageURL,
	FieldPromptID,
	FieldNegativePromptID,
	FieldModelID,
	FieldSchedulerID,
	FieldUserID,
	FieldDeviceInfoID,
	FieldStartedAt,
	FieldCompletedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsSubmittedToGallery holds the default value on creation for the "is_submitted_to_gallery" field.
	DefaultIsSubmittedToGallery bool
	// DefaultIsPublic holds the default value on creation for the "is_public" field.
	DefaultIsPublic bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusStarted   Status = "started"
	StatusSucceeded Status = "succeeded"
	StatusFailed    Status = "failed"
	StatusRejected  Status = "rejected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusStarted, StatusSucceeded, StatusFailed, StatusRejected:
		return nil
	default:
		return fmt.Errorf("generation: invalid enum value for status field: %q", s)
	}
}
