// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/ent/userrole"
)

// UserRoleUpdate is the builder for updating UserRole entities.
type UserRoleUpdate struct {
	config
	hooks     []Hook
	mutation  *UserRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserRoleUpdate builder.
func (uru *UserRoleUpdate) Where(ps ...predicate.UserRole) *UserRoleUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// SetUserID sets the "user_id" field.
func (uru *UserRoleUpdate) SetUserID(u uuid.UUID) *UserRoleUpdate {
	uru.mutation.SetUserID(u)
	return uru
}

// SetRoleName sets the "role_name" field.
func (uru *UserRoleUpdate) SetRoleName(un userrole.RoleName) *UserRoleUpdate {
	uru.mutation.SetRoleName(un)
	return uru
}

// SetUpdatedAt sets the "updated_at" field.
func (uru *UserRoleUpdate) SetUpdatedAt(t time.Time) *UserRoleUpdate {
	uru.mutation.SetUpdatedAt(t)
	return uru
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (uru *UserRoleUpdate) SetUsersID(id uuid.UUID) *UserRoleUpdate {
	uru.mutation.SetUsersID(id)
	return uru
}

// SetUsers sets the "users" edge to the User entity.
func (uru *UserRoleUpdate) SetUsers(u *User) *UserRoleUpdate {
	return uru.SetUsersID(u.ID)
}

// Mutation returns the UserRoleMutation object of the builder.
func (uru *UserRoleUpdate) Mutation() *UserRoleMutation {
	return uru.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (uru *UserRoleUpdate) ClearUsers() *UserRoleUpdate {
	uru.mutation.ClearUsers()
	return uru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UserRoleUpdate) Save(ctx context.Context) (int, error) {
	uru.defaults()
	return withHooks[int, UserRoleMutation](ctx, uru.sqlSave, uru.mutation, uru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UserRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UserRoleUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UserRoleUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uru *UserRoleUpdate) defaults() {
	if _, ok := uru.mutation.UpdatedAt(); !ok {
		v := userrole.UpdateDefaultUpdatedAt()
		uru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uru *UserRoleUpdate) check() error {
	if v, ok := uru.mutation.RoleName(); ok {
		if err := userrole.RoleNameValidator(v); err != nil {
			return &ValidationError{Name: "role_name", err: fmt.Errorf(`ent: validator failed for field "UserRole.role_name": %w`, err)}
		}
	}
	if _, ok := uru.mutation.UsersID(); uru.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRole.users"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uru *UserRoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserRoleUpdate {
	uru.modifiers = append(uru.modifiers, modifiers...)
	return uru
}

func (uru *UserRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uru.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userrole.Table,
			Columns: userrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userrole.FieldID,
			},
		},
	}
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uru.mutation.RoleName(); ok {
		_spec.SetField(userrole.FieldRoleName, field.TypeEnum, value)
	}
	if value, ok := uru.mutation.UpdatedAt(); ok {
		_spec.SetField(userrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if uru.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.UsersTable,
			Columns: []string{userrole.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uru.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.UsersTable,
			Columns: []string{userrole.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uru.mutation.done = true
	return n, nil
}

// UserRoleUpdateOne is the builder for updating a single UserRole entity.
type UserRoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (uruo *UserRoleUpdateOne) SetUserID(u uuid.UUID) *UserRoleUpdateOne {
	uruo.mutation.SetUserID(u)
	return uruo
}

// SetRoleName sets the "role_name" field.
func (uruo *UserRoleUpdateOne) SetRoleName(un userrole.RoleName) *UserRoleUpdateOne {
	uruo.mutation.SetRoleName(un)
	return uruo
}

// SetUpdatedAt sets the "updated_at" field.
func (uruo *UserRoleUpdateOne) SetUpdatedAt(t time.Time) *UserRoleUpdateOne {
	uruo.mutation.SetUpdatedAt(t)
	return uruo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (uruo *UserRoleUpdateOne) SetUsersID(id uuid.UUID) *UserRoleUpdateOne {
	uruo.mutation.SetUsersID(id)
	return uruo
}

// SetUsers sets the "users" edge to the User entity.
func (uruo *UserRoleUpdateOne) SetUsers(u *User) *UserRoleUpdateOne {
	return uruo.SetUsersID(u.ID)
}

// Mutation returns the UserRoleMutation object of the builder.
func (uruo *UserRoleUpdateOne) Mutation() *UserRoleMutation {
	return uruo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (uruo *UserRoleUpdateOne) ClearUsers() *UserRoleUpdateOne {
	uruo.mutation.ClearUsers()
	return uruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UserRoleUpdateOne) Select(field string, fields ...string) *UserRoleUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UserRole entity.
func (uruo *UserRoleUpdateOne) Save(ctx context.Context) (*UserRole, error) {
	uruo.defaults()
	return withHooks[*UserRole, UserRoleMutation](ctx, uruo.sqlSave, uruo.mutation, uruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UserRoleUpdateOne) SaveX(ctx context.Context) *UserRole {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UserRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UserRoleUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uruo *UserRoleUpdateOne) defaults() {
	if _, ok := uruo.mutation.UpdatedAt(); !ok {
		v := userrole.UpdateDefaultUpdatedAt()
		uruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uruo *UserRoleUpdateOne) check() error {
	if v, ok := uruo.mutation.RoleName(); ok {
		if err := userrole.RoleNameValidator(v); err != nil {
			return &ValidationError{Name: "role_name", err: fmt.Errorf(`ent: validator failed for field "UserRole.role_name": %w`, err)}
		}
	}
	if _, ok := uruo.mutation.UsersID(); uruo.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserRole.users"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uruo *UserRoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserRoleUpdateOne {
	uruo.modifiers = append(uruo.modifiers, modifiers...)
	return uruo
}

func (uruo *UserRoleUpdateOne) sqlSave(ctx context.Context) (_node *UserRole, err error) {
	if err := uruo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userrole.Table,
			Columns: userrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userrole.FieldID,
			},
		},
	}
	id, ok := uruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userrole.FieldID)
		for _, f := range fields {
			if !userrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uruo.mutation.RoleName(); ok {
		_spec.SetField(userrole.FieldRoleName, field.TypeEnum, value)
	}
	if value, ok := uruo.mutation.UpdatedAt(); ok {
		_spec.SetField(userrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if uruo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.UsersTable,
			Columns: []string{userrole.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uruo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrole.UsersTable,
			Columns: []string{userrole.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uruo.modifiers...)
	_node = &UserRole{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uruo.mutation.done = true
	return _node, nil
}
