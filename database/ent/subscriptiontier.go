// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/stablecog/go-apps/database/ent/subscriptiontier"
)

// SubscriptionTier is the model entity for the SubscriptionTier schema.
type SubscriptionTier struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// BaseCredits holds the value of the "base_credits" field.
	BaseCredits int32 `json:"base_credits,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionTierQuery when eager-loading is set.
	Edges SubscriptionTierEdges `json:"edges"`
}

// SubscriptionTierEdges holds the relations/edges for other nodes in the graph.
type SubscriptionTierEdges struct {
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*Subscription `json:"subscriptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e SubscriptionTierEdges) SubscriptionsOrErr() ([]*Subscription, error) {
	if e.loadedTypes[0] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionTier) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptiontier.FieldBaseCredits:
			values[i] = new(sql.NullInt64)
		case subscriptiontier.FieldName:
			values[i] = new(sql.NullString)
		case subscriptiontier.FieldCreatedAt, subscriptiontier.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case subscriptiontier.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SubscriptionTier", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionTier fields.
func (st *SubscriptionTier) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptiontier.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				st.ID = *value
			}
		case subscriptiontier.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case subscriptiontier.FieldBaseCredits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field base_credits", values[i])
			} else if value.Valid {
				st.BaseCredits = int32(value.Int64)
			}
		case subscriptiontier.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case subscriptiontier.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QuerySubscriptions queries the "subscriptions" edge of the SubscriptionTier entity.
func (st *SubscriptionTier) QuerySubscriptions() *SubscriptionQuery {
	return NewSubscriptionTierClient(st.config).QuerySubscriptions(st)
}

// Update returns a builder for updating this SubscriptionTier.
// Note that you need to call SubscriptionTier.Unwrap() before calling this method if this SubscriptionTier
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SubscriptionTier) Update() *SubscriptionTierUpdateOne {
	return NewSubscriptionTierClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SubscriptionTier entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SubscriptionTier) Unwrap() *SubscriptionTier {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscriptionTier is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SubscriptionTier) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionTier(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("name=")
	builder.WriteString(st.Name)
	builder.WriteString(", ")
	builder.WriteString("base_credits=")
	builder.WriteString(fmt.Sprintf("%v", st.BaseCredits))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionTiers is a parsable slice of SubscriptionTier.
type SubscriptionTiers []*SubscriptionTier

func (st SubscriptionTiers) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
