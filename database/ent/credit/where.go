// Code generated by ent, DO NOT EDIT.

package credit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldID, id))
}

// RemainingAmount applies equality check predicate on the "remaining_amount" field. It's identical to RemainingAmountEQ.
func RemainingAmount(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldRemainingAmount, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldExpiresAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldUserID, v))
}

// CreditTypeID applies equality check predicate on the "credit_type_id" field. It's identical to CreditTypeIDEQ.
func CreditTypeID(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldCreditTypeID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldUpdatedAt, v))
}

// RemainingAmountEQ applies the EQ predicate on the "remaining_amount" field.
func RemainingAmountEQ(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldRemainingAmount, v))
}

// RemainingAmountNEQ applies the NEQ predicate on the "remaining_amount" field.
func RemainingAmountNEQ(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldRemainingAmount, v))
}

// RemainingAmountIn applies the In predicate on the "remaining_amount" field.
func RemainingAmountIn(vs ...int32) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldRemainingAmount, vs...))
}

// RemainingAmountNotIn applies the NotIn predicate on the "remaining_amount" field.
func RemainingAmountNotIn(vs ...int32) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldRemainingAmount, vs...))
}

// RemainingAmountGT applies the GT predicate on the "remaining_amount" field.
func RemainingAmountGT(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldRemainingAmount, v))
}

// RemainingAmountGTE applies the GTE predicate on the "remaining_amount" field.
func RemainingAmountGTE(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldRemainingAmount, v))
}

// RemainingAmountLT applies the LT predicate on the "remaining_amount" field.
func RemainingAmountLT(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldRemainingAmount, v))
}

// RemainingAmountLTE applies the LTE predicate on the "remaining_amount" field.
func RemainingAmountLTE(v int32) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldRemainingAmount, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldExpiresAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldUserID, vs...))
}

// CreditTypeIDEQ applies the EQ predicate on the "credit_type_id" field.
func CreditTypeIDEQ(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldCreditTypeID, v))
}

// CreditTypeIDNEQ applies the NEQ predicate on the "credit_type_id" field.
func CreditTypeIDNEQ(v uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldCreditTypeID, v))
}

// CreditTypeIDIn applies the In predicate on the "credit_type_id" field.
func CreditTypeIDIn(vs ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldCreditTypeID, vs...))
}

// CreditTypeIDNotIn applies the NotIn predicate on the "credit_type_id" field.
func CreditTypeIDNotIn(vs ...uuid.UUID) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldCreditTypeID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Credit {
	return predicate.Credit(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreditTypes applies the HasEdge predicate on the "credit_types" edge.
func HasCreditTypes() predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreditTypesTable, CreditTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreditTypesWith applies the HasEdge predicate on the "credit_types" edge with a given conditions (other predicates).
func HasCreditTypesWith(preds ...predicate.CreditType) predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreditTypesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreditTypesTable, CreditTypesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Credit) predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Credit) predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Credit) predicate.Credit {
	return predicate.Credit(func(s *sql.Selector) {
		p(s.Not())
	})
}
