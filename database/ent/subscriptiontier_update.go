// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/go-apps/database/ent/predicate"
	"github.com/stablecog/go-apps/database/ent/subscription"
	"github.com/stablecog/go-apps/database/ent/subscriptiontier"
)

// SubscriptionTierUpdate is the builder for updating SubscriptionTier entities.
type SubscriptionTierUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionTierMutation
}

// Where appends a list predicates to the SubscriptionTierUpdate builder.
func (stu *SubscriptionTierUpdate) Where(ps ...predicate.SubscriptionTier) *SubscriptionTierUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetName sets the "name" field.
func (stu *SubscriptionTierUpdate) SetName(s string) *SubscriptionTierUpdate {
	stu.mutation.SetName(s)
	return stu
}

// SetBaseCredits sets the "base_credits" field.
func (stu *SubscriptionTierUpdate) SetBaseCredits(i int32) *SubscriptionTierUpdate {
	stu.mutation.ResetBaseCredits()
	stu.mutation.SetBaseCredits(i)
	return stu
}

// AddBaseCredits adds i to the "base_credits" field.
func (stu *SubscriptionTierUpdate) AddBaseCredits(i int32) *SubscriptionTierUpdate {
	stu.mutation.AddBaseCredits(i)
	return stu
}

// SetUpdatedAt sets the "updated_at" field.
func (stu *SubscriptionTierUpdate) SetUpdatedAt(t time.Time) *SubscriptionTierUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (stu *SubscriptionTierUpdate) AddSubscriptionIDs(ids ...uuid.UUID) *SubscriptionTierUpdate {
	stu.mutation.AddSubscriptionIDs(ids...)
	return stu
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (stu *SubscriptionTierUpdate) AddSubscriptions(s ...*Subscription) *SubscriptionTierUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddSubscriptionIDs(ids...)
}

// Mutation returns the SubscriptionTierMutation object of the builder.
func (stu *SubscriptionTierUpdate) Mutation() *SubscriptionTierMutation {
	return stu.mutation
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (stu *SubscriptionTierUpdate) ClearSubscriptions() *SubscriptionTierUpdate {
	stu.mutation.ClearSubscriptions()
	return stu
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (stu *SubscriptionTierUpdate) RemoveSubscriptionIDs(ids ...uuid.UUID) *SubscriptionTierUpdate {
	stu.mutation.RemoveSubscriptionIDs(ids...)
	return stu
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (stu *SubscriptionTierUpdate) RemoveSubscriptions(s ...*Subscription) *SubscriptionTierUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SubscriptionTierUpdate) Save(ctx context.Context) (int, error) {
	stu.defaults()
	return withHooks[int, SubscriptionTierMutation](ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SubscriptionTierUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SubscriptionTierUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SubscriptionTierUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SubscriptionTierUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		v := subscriptiontier.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
}

func (stu *SubscriptionTierUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscriptiontier.Table,
			Columns: subscriptiontier.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subscriptiontier.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Name(); ok {
		_spec.SetField(subscriptiontier.FieldName, field.TypeString, value)
	}
	if value, ok := stu.mutation.BaseCredits(); ok {
		_spec.SetField(subscriptiontier.FieldBaseCredits, field.TypeInt32, value)
	}
	if value, ok := stu.mutation.AddedBaseCredits(); ok {
		_spec.AddField(subscriptiontier.FieldBaseCredits, field.TypeInt32, value)
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptiontier.FieldUpdatedAt, field.TypeTime, value)
	}
	if stu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptiontier.SubscriptionsTable,
			Columns: []string{subscriptiontier.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !stu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptiontier.SubscriptionsTable,
			Columns: []string{subscriptiontier.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptiontier.SubscriptionsTable,
			Columns: []string{subscriptiontier.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptiontier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SubscriptionTierUpdateOne is the builder for updating a single SubscriptionTier entity.
type SubscriptionTierUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionTierMutation
}

// SetName sets the "name" field.
func (stuo *SubscriptionTierUpdateOne) SetName(s string) *SubscriptionTierUpdateOne {
	stuo.mutation.SetName(s)
	return stuo
}

// SetBaseCredits sets the "base_credits" field.
func (stuo *SubscriptionTierUpdateOne) SetBaseCredits(i int32) *SubscriptionTierUpdateOne {
	stuo.mutation.ResetBaseCredits()
	stuo.mutation.SetBaseCredits(i)
	return stuo
}

// AddBaseCredits adds i to the "base_credits" field.
func (stuo *SubscriptionTierUpdateOne) AddBaseCredits(i int32) *SubscriptionTierUpdateOne {
	stuo.mutation.AddBaseCredits(i)
	return stuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stuo *SubscriptionTierUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionTierUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (stuo *SubscriptionTierUpdateOne) AddSubscriptionIDs(ids ...uuid.UUID) *SubscriptionTierUpdateOne {
	stuo.mutation.AddSubscriptionIDs(ids...)
	return stuo
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (stuo *SubscriptionTierUpdateOne) AddSubscriptions(s ...*Subscription) *SubscriptionTierUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddSubscriptionIDs(ids...)
}

// Mutation returns the SubscriptionTierMutation object of the builder.
func (stuo *SubscriptionTierUpdateOne) Mutation() *SubscriptionTierMutation {
	return stuo.mutation
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (stuo *SubscriptionTierUpdateOne) ClearSubscriptions() *SubscriptionTierUpdateOne {
	stuo.mutation.ClearSubscriptions()
	return stuo
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (stuo *SubscriptionTierUpdateOne) RemoveSubscriptionIDs(ids ...uuid.UUID) *SubscriptionTierUpdateOne {
	stuo.mutation.RemoveSubscriptionIDs(ids...)
	return stuo
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (stuo *SubscriptionTierUpdateOne) RemoveSubscriptions(s ...*Subscription) *SubscriptionTierUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveSubscriptionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SubscriptionTierUpdateOne) Select(field string, fields ...string) *SubscriptionTierUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SubscriptionTier entity.
func (stuo *SubscriptionTierUpdateOne) Save(ctx context.Context) (*SubscriptionTier, error) {
	stuo.defaults()
	return withHooks[*SubscriptionTier, SubscriptionTierMutation](ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SubscriptionTierUpdateOne) SaveX(ctx context.Context) *SubscriptionTier {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SubscriptionTierUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SubscriptionTierUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SubscriptionTierUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		v := subscriptiontier.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
}

func (stuo *SubscriptionTierUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionTier, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscriptiontier.Table,
			Columns: subscriptiontier.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subscriptiontier.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscriptionTier.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptiontier.FieldID)
		for _, f := range fields {
			if !subscriptiontier.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscriptiontier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Name(); ok {
		_spec.SetField(subscriptiontier.FieldName, field.TypeString, value)
	}
	if value, ok := stuo.mutation.BaseCredits(); ok {
		_spec.SetField(subscriptiontier.FieldBaseCredits, field.TypeInt32, value)
	}
	if value, ok := stuo.mutation.AddedBaseCredits(); ok {
		_spec.AddField(subscriptiontier.FieldBaseCredits, field.TypeInt32, value)
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptiontier.FieldUpdatedAt, field.TypeTime, value)
	}
	if stuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptiontier.SubscriptionsTable,
			Columns: []string{subscriptiontier.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !stuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptiontier.SubscriptionsTable,
			Columns: []string{subscriptiontier.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptiontier.SubscriptionsTable,
			Columns: []string{subscriptiontier.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionTier{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptiontier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
