// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/go-apps/database/ent/subscription"
	"github.com/stablecog/go-apps/database/ent/subscriptiontier"
)

// SubscriptionTierCreate is the builder for creating a SubscriptionTier entity.
type SubscriptionTierCreate struct {
	config
	mutation *SubscriptionTierMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (stc *SubscriptionTierCreate) SetName(s string) *SubscriptionTierCreate {
	stc.mutation.SetName(s)
	return stc
}

// SetBaseCredits sets the "base_credits" field.
func (stc *SubscriptionTierCreate) SetBaseCredits(i int32) *SubscriptionTierCreate {
	stc.mutation.SetBaseCredits(i)
	return stc
}

// SetCreatedAt sets the "created_at" field.
func (stc *SubscriptionTierCreate) SetCreatedAt(t time.Time) *SubscriptionTierCreate {
	stc.mutation.SetCreatedAt(t)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *SubscriptionTierCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionTierCreate {
	if t != nil {
		stc.SetCreatedAt(*t)
	}
	return stc
}

// SetUpdatedAt sets the "updated_at" field.
func (stc *SubscriptionTierCreate) SetUpdatedAt(t time.Time) *SubscriptionTierCreate {
	stc.mutation.SetUpdatedAt(t)
	return stc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stc *SubscriptionTierCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionTierCreate {
	if t != nil {
		stc.SetUpdatedAt(*t)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *SubscriptionTierCreate) SetID(u uuid.UUID) *SubscriptionTierCreate {
	stc.mutation.SetID(u)
	return stc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (stc *SubscriptionTierCreate) SetNillableID(u *uuid.UUID) *SubscriptionTierCreate {
	if u != nil {
		stc.SetID(*u)
	}
	return stc
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (stc *SubscriptionTierCreate) AddSubscriptionIDs(ids ...uuid.UUID) *SubscriptionTierCreate {
	stc.mutation.AddSubscriptionIDs(ids...)
	return stc
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (stc *SubscriptionTierCreate) AddSubscriptions(s ...*Subscription) *SubscriptionTierCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddSubscriptionIDs(ids...)
}

// Mutation returns the SubscriptionTierMutation object of the builder.
func (stc *SubscriptionTierCreate) Mutation() *SubscriptionTierMutation {
	return stc.mutation
}

// Save creates the SubscriptionTier in the database.
func (stc *SubscriptionTierCreate) Save(ctx context.Context) (*SubscriptionTier, error) {
	stc.defaults()
	return withHooks[*SubscriptionTier, SubscriptionTierMutation](ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SubscriptionTierCreate) SaveX(ctx context.Context) *SubscriptionTier {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SubscriptionTierCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SubscriptionTierCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SubscriptionTierCreate) defaults() {
	if _, ok := stc.mutation.CreatedAt(); !ok {
		v := subscriptiontier.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		v := subscriptiontier.DefaultUpdatedAt()
		stc.mutation.SetUpdatedAt(v)
	}
	if _, ok := stc.mutation.ID(); !ok {
		v := subscriptiontier.DefaultID()
		stc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SubscriptionTierCreate) check() error {
	if _, ok := stc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SubscriptionTier.name"`)}
	}
	if _, ok := stc.mutation.BaseCredits(); !ok {
		return &ValidationError{Name: "base_credits", err: errors.New(`ent: missing required field "SubscriptionTier.base_credits"`)}
	}
	if _, ok := stc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SubscriptionTier.created_at"`)}
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SubscriptionTier.updated_at"`)}
	}
	return nil
}

func (stc *SubscriptionTierCreate) sqlSave(ctx context.Context) (*SubscriptionTier, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SubscriptionTierCreate) createSpec() (*SubscriptionTier, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionTier{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subscriptiontier.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subscriptiontier.FieldID,
			},
		}
	)
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := stc.mutation.Name(); ok {
		_spec.SetField(subscriptiontier.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := stc.mutation.BaseCredits(); ok {
		_spec.SetField(subscriptiontier.FieldBaseCredits, field.TypeInt32, value)
		_node.BaseCredits = value
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptiontier.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptiontier.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := stc.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscriptiontier.SubscriptionsTable,
			Columns: []string{subscriptiontier.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubscriptionTierCreateBulk is the builder for creating many SubscriptionTier entities in bulk.
type SubscriptionTierCreateBulk struct {
	config
	builders []*SubscriptionTierCreate
}

// Save creates the SubscriptionTier entities in the database.
func (stcb *SubscriptionTierCreateBulk) Save(ctx context.Context) ([]*SubscriptionTier, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SubscriptionTier, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionTierMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SubscriptionTierCreateBulk) SaveX(ctx context.Context) []*SubscriptionTier {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SubscriptionTierCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SubscriptionTierCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
