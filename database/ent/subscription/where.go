// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/stablecog/go-apps/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUserID, v))
}

// SubscriptionTierID applies equality check predicate on the "subscription_tier_id" field. It's identical to SubscriptionTierIDEQ.
func SubscriptionTierID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldSubscriptionTierID, v))
}

// PaidStartedAt applies equality check predicate on the "paid_started_at" field. It's identical to PaidStartedAtEQ.
func PaidStartedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPaidStartedAt, v))
}

// PaidCancelledAt applies equality check predicate on the "paid_cancelled_at" field. It's identical to PaidCancelledAtEQ.
func PaidCancelledAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPaidCancelledAt, v))
}

// PaidExpiresAt applies equality check predicate on the "paid_expires_at" field. It's identical to PaidExpiresAtEQ.
func PaidExpiresAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPaidExpiresAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUserID, vs...))
}

// SubscriptionTierIDEQ applies the EQ predicate on the "subscription_tier_id" field.
func SubscriptionTierIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldSubscriptionTierID, v))
}

// SubscriptionTierIDNEQ applies the NEQ predicate on the "subscription_tier_id" field.
func SubscriptionTierIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldSubscriptionTierID, v))
}

// SubscriptionTierIDIn applies the In predicate on the "subscription_tier_id" field.
func SubscriptionTierIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldSubscriptionTierID, vs...))
}

// SubscriptionTierIDNotIn applies the NotIn predicate on the "subscription_tier_id" field.
func SubscriptionTierIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldSubscriptionTierID, vs...))
}

// PaidStartedAtEQ applies the EQ predicate on the "paid_started_at" field.
func PaidStartedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPaidStartedAt, v))
}

// PaidStartedAtNEQ applies the NEQ predicate on the "paid_started_at" field.
func PaidStartedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPaidStartedAt, v))
}

// PaidStartedAtIn applies the In predicate on the "paid_started_at" field.
func PaidStartedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPaidStartedAt, vs...))
}

// PaidStartedAtNotIn applies the NotIn predicate on the "paid_started_at" field.
func PaidStartedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPaidStartedAt, vs...))
}

// PaidStartedAtGT applies the GT predicate on the "paid_started_at" field.
func PaidStartedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPaidStartedAt, v))
}

// PaidStartedAtGTE applies the GTE predicate on the "paid_started_at" field.
func PaidStartedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPaidStartedAt, v))
}

// PaidStartedAtLT applies the LT predicate on the "paid_started_at" field.
func PaidStartedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPaidStartedAt, v))
}

// PaidStartedAtLTE applies the LTE predicate on the "paid_started_at" field.
func PaidStartedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPaidStartedAt, v))
}

// PaidStartedAtIsNil applies the IsNil predicate on the "paid_started_at" field.
func PaidStartedAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldPaidStartedAt))
}

// PaidStartedAtNotNil applies the NotNil predicate on the "paid_started_at" field.
func PaidStartedAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldPaidStartedAt))
}

// PaidCancelledAtEQ applies the EQ predicate on the "paid_cancelled_at" field.
func PaidCancelledAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPaidCancelledAt, v))
}

// PaidCancelledAtNEQ applies the NEQ predicate on the "paid_cancelled_at" field.
func PaidCancelledAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPaidCancelledAt, v))
}

// PaidCancelledAtIn applies the In predicate on the "paid_cancelled_at" field.
func PaidCancelledAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPaidCancelledAt, vs...))
}

// PaidCancelledAtNotIn applies the NotIn predicate on the "paid_cancelled_at" field.
func PaidCancelledAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPaidCancelledAt, vs...))
}

// PaidCancelledAtGT applies the GT predicate on the "paid_cancelled_at" field.
func PaidCancelledAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPaidCancelledAt, v))
}

// PaidCancelledAtGTE applies the GTE predicate on the "paid_cancelled_at" field.
func PaidCancelledAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPaidCancelledAt, v))
}

// PaidCancelledAtLT applies the LT predicate on the "paid_cancelled_at" field.
func PaidCancelledAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPaidCancelledAt, v))
}

// PaidCancelledAtLTE applies the LTE predicate on the "paid_cancelled_at" field.
func PaidCancelledAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPaidCancelledAt, v))
}

// PaidCancelledAtIsNil applies the IsNil predicate on the "paid_cancelled_at" field.
func PaidCancelledAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldPaidCancelledAt))
}

// PaidCancelledAtNotNil applies the NotNil predicate on the "paid_cancelled_at" field.
func PaidCancelledAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldPaidCancelledAt))
}

// PaidExpiresAtEQ applies the EQ predicate on the "paid_expires_at" field.
func PaidExpiresAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPaidExpiresAt, v))
}

// PaidExpiresAtNEQ applies the NEQ predicate on the "paid_expires_at" field.
func PaidExpiresAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPaidExpiresAt, v))
}

// PaidExpiresAtIn applies the In predicate on the "paid_expires_at" field.
func PaidExpiresAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPaidExpiresAt, vs...))
}

// PaidExpiresAtNotIn applies the NotIn predicate on the "paid_expires_at" field.
func PaidExpiresAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPaidExpiresAt, vs...))
}

// PaidExpiresAtGT applies the GT predicate on the "paid_expires_at" field.
func PaidExpiresAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPaidExpiresAt, v))
}

// PaidExpiresAtGTE applies the GTE predicate on the "paid_expires_at" field.
func PaidExpiresAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPaidExpiresAt, v))
}

// PaidExpiresAtLT applies the LT predicate on the "paid_expires_at" field.
func PaidExpiresAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPaidExpiresAt, v))
}

// PaidExpiresAtLTE applies the LTE predicate on the "paid_expires_at" field.
func PaidExpiresAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPaidExpiresAt, v))
}

// PaidExpiresAtIsNil applies the IsNil predicate on the "paid_expires_at" field.
func PaidExpiresAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldPaidExpiresAt))
}

// PaidExpiresAtNotNil applies the NotNil predicate on the "paid_expires_at" field.
func PaidExpiresAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldPaidExpiresAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscriptionTier applies the HasEdge predicate on the "subscription_tier" edge.
func HasSubscriptionTier() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTierTable, SubscriptionTierColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionTierWith applies the HasEdge predicate on the "subscription_tier" edge with a given conditions (other predicates).
func HasSubscriptionTierWith(preds ...predicate.SubscriptionTier) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscriptionTierInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTierTable, SubscriptionTierColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		p(s.Not())
	})
}
