// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/go-apps/database/ent/deviceinfo"
	"github.com/stablecog/go-apps/database/ent/generation"
	"github.com/stablecog/go-apps/database/ent/generationmodel"
	"github.com/stablecog/go-apps/database/ent/generationoutput"
	"github.com/stablecog/go-apps/database/ent/negativeprompt"
	"github.com/stablecog/go-apps/database/ent/predicate"
	"github.com/stablecog/go-apps/database/ent/prompt"
	"github.com/stablecog/go-apps/database/ent/scheduler"
	"github.com/stablecog/go-apps/database/ent/user"
	"github.com/stablecog/go-apps/database/enttypes"
)

// GenerationUpdate is the builder for updating Generation entities.
type GenerationUpdate struct {
	config
	hooks    []Hook
	mutation *GenerationMutation
}

// Where appends a list predicates to the GenerationUpdate builder.
func (gu *GenerationUpdate) Where(ps ...predicate.Generation) *GenerationUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetWidth sets the "width" field.
func (gu *GenerationUpdate) SetWidth(i int) *GenerationUpdate {
	gu.mutation.ResetWidth()
	gu.mutation.SetWidth(i)
	return gu
}

// AddWidth adds i to the "width" field.
func (gu *GenerationUpdate) AddWidth(i int) *GenerationUpdate {
	gu.mutation.AddWidth(i)
	return gu
}

// SetHeight sets the "height" field.
func (gu *GenerationUpdate) SetHeight(i int) *GenerationUpdate {
	gu.mutation.ResetHeight()
	gu.mutation.SetHeight(i)
	return gu
}

// AddHeight adds i to the "height" field.
func (gu *GenerationUpdate) AddHeight(i int) *GenerationUpdate {
	gu.mutation.AddHeight(i)
	return gu
}

// SetInterferenceSteps sets the "interference_steps" field.
func (gu *GenerationUpdate) SetInterferenceSteps(i int) *GenerationUpdate {
	gu.mutation.ResetInterferenceSteps()
	gu.mutation.SetInterferenceSteps(i)
	return gu
}

// AddInterferenceSteps adds i to the "interference_steps" field.
func (gu *GenerationUpdate) AddInterferenceSteps(i int) *GenerationUpdate {
	gu.mutation.AddInterferenceSteps(i)
	return gu
}

// SetGuidanceScale sets the "guidance_scale" field.
func (gu *GenerationUpdate) SetGuidanceScale(f float64) *GenerationUpdate {
	gu.mutation.ResetGuidanceScale()
	gu.mutation.SetGuidanceScale(f)
	return gu
}

// AddGuidanceScale adds f to the "guidance_scale" field.
func (gu *GenerationUpdate) AddGuidanceScale(f float64) *GenerationUpdate {
	gu.mutation.AddGuidanceScale(f)
	return gu
}

// SetSeed sets the "seed" field.
func (gu *GenerationUpdate) SetSeed(ei enttypes.BigInt) *GenerationUpdate {
	gu.mutation.ResetSeed()
	gu.mutation.SetSeed(ei)
	return gu
}

// SetNillableSeed sets the "seed" field if the given value is not nil.
func (gu *GenerationUpdate) SetNillableSeed(ei *enttypes.BigInt) *GenerationUpdate {
	if ei != nil {
		gu.SetSeed(*ei)
	}
	return gu
}

// AddSeed adds ei to the "seed" field.
func (gu *GenerationUpdate) AddSeed(ei enttypes.BigInt) *GenerationUpdate {
	gu.mutation.AddSeed(ei)
	return gu
}

// ClearSeed clears the value of the "seed" field.
func (gu *GenerationUpdate) ClearSeed() *GenerationUpdate {
	gu.mutation.ClearSeed()
	return gu
}

// SetDurationMs sets the "duration_ms" field.
func (gu *GenerationUpdate) SetDurationMs(i int) *GenerationUpdate {
	gu.mutation.ResetDurationMs()
	gu.mutation.SetDurationMs(i)
	return gu
}

// AddDurationMs adds i to the "duration_ms" field.
func (gu *GenerationUpdate) AddDurationMs(i int) *GenerationUpdate {
	gu.mutation.AddDurationMs(i)
	return gu
}

// SetStatus sets the "status" field.
func (gu *GenerationUpdate) SetStatus(ge generation.Status) *GenerationUpdate {
	gu.mutation.SetStatus(ge)
	return gu
}

// SetFailureReason sets the "failure_reason" field.
func (gu *GenerationUpdate) SetFailureReason(s string) *GenerationUpdate {
	gu.mutation.SetFailureReason(s)
	return gu
}

// SetCountryCode sets the "country_code" field.
func (gu *GenerationUpdate) SetCountryCode(s string) *GenerationUpdate {
	gu.mutation.SetCountryCode(s)
	return gu
}

// SetPromptID sets the "prompt_id" field.
func (gu *GenerationUpdate) SetPromptID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetPromptID(u)
	return gu
}

// SetNegativePromptID sets the "negative_prompt_id" field.
func (gu *GenerationUpdate) SetNegativePromptID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetNegativePromptID(u)
	return gu
}

// SetModelID sets the "model_id" field.
func (gu *GenerationUpdate) SetModelID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetModelID(u)
	return gu
}

// SetSchedulerID sets the "scheduler_id" field.
func (gu *GenerationUpdate) SetSchedulerID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetSchedulerID(u)
	return gu
}

// SetUserID sets the "user_id" field.
func (gu *GenerationUpdate) SetUserID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetUserID(u)
	return gu
}

// SetDeviceInfoID sets the "device_info_id" field.
func (gu *GenerationUpdate) SetDeviceInfoID(u uuid.UUID) *GenerationUpdate {
	gu.mutation.SetDeviceInfoID(u)
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GenerationUpdate) SetUpdatedAt(t time.Time) *GenerationUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (gu *GenerationUpdate) SetDeviceInfo(d *DeviceInfo) *GenerationUpdate {
	return gu.SetDeviceInfoID(d.ID)
}

// SetSchedulersID sets the "schedulers" edge to the Scheduler entity by ID.
func (gu *GenerationUpdate) SetSchedulersID(id uuid.UUID) *GenerationUpdate {
	gu.mutation.SetSchedulersID(id)
	return gu
}

// SetSchedulers sets the "schedulers" edge to the Scheduler entity.
func (gu *GenerationUpdate) SetSchedulers(s *Scheduler) *GenerationUpdate {
	return gu.SetSchedulersID(s.ID)
}

// SetPromptsID sets the "prompts" edge to the Prompt entity by ID.
func (gu *GenerationUpdate) SetPromptsID(id uuid.UUID) *GenerationUpdate {
	gu.mutation.SetPromptsID(id)
	return gu
}

// SetPrompts sets the "prompts" edge to the Prompt entity.
func (gu *GenerationUpdate) SetPrompts(p *Prompt) *GenerationUpdate {
	return gu.SetPromptsID(p.ID)
}

// SetNegativePromptsID sets the "negative_prompts" edge to the NegativePrompt entity by ID.
func (gu *GenerationUpdate) SetNegativePromptsID(id uuid.UUID) *GenerationUpdate {
	gu.mutation.SetNegativePromptsID(id)
	return gu
}

// SetNegativePrompts sets the "negative_prompts" edge to the NegativePrompt entity.
func (gu *GenerationUpdate) SetNegativePrompts(n *NegativePrompt) *GenerationUpdate {
	return gu.SetNegativePromptsID(n.ID)
}

// SetGenerationModelsID sets the "generation_models" edge to the GenerationModel entity by ID.
func (gu *GenerationUpdate) SetGenerationModelsID(id uuid.UUID) *GenerationUpdate {
	gu.mutation.SetGenerationModelsID(id)
	return gu
}

// SetGenerationModels sets the "generation_models" edge to the GenerationModel entity.
func (gu *GenerationUpdate) SetGenerationModels(g *GenerationModel) *GenerationUpdate {
	return gu.SetGenerationModelsID(g.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (gu *GenerationUpdate) SetUsersID(id uuid.UUID) *GenerationUpdate {
	gu.mutation.SetUsersID(id)
	return gu
}

// SetUsers sets the "users" edge to the User entity.
func (gu *GenerationUpdate) SetUsers(u *User) *GenerationUpdate {
	return gu.SetUsersID(u.ID)
}

// AddGenerationOutputIDs adds the "generation_outputs" edge to the GenerationOutput entity by IDs.
func (gu *GenerationUpdate) AddGenerationOutputIDs(ids ...uuid.UUID) *GenerationUpdate {
	gu.mutation.AddGenerationOutputIDs(ids...)
	return gu
}

// AddGenerationOutputs adds the "generation_outputs" edges to the GenerationOutput entity.
func (gu *GenerationUpdate) AddGenerationOutputs(g ...*GenerationOutput) *GenerationUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddGenerationOutputIDs(ids...)
}

// Mutation returns the GenerationMutation object of the builder.
func (gu *GenerationUpdate) Mutation() *GenerationMutation {
	return gu.mutation
}

// ClearDeviceInfo clears the "device_info" edge to the DeviceInfo entity.
func (gu *GenerationUpdate) ClearDeviceInfo() *GenerationUpdate {
	gu.mutation.ClearDeviceInfo()
	return gu
}

// ClearSchedulers clears the "schedulers" edge to the Scheduler entity.
func (gu *GenerationUpdate) ClearSchedulers() *GenerationUpdate {
	gu.mutation.ClearSchedulers()
	return gu
}

// ClearPrompts clears the "prompts" edge to the Prompt entity.
func (gu *GenerationUpdate) ClearPrompts() *GenerationUpdate {
	gu.mutation.ClearPrompts()
	return gu
}

// ClearNegativePrompts clears the "negative_prompts" edge to the NegativePrompt entity.
func (gu *GenerationUpdate) ClearNegativePrompts() *GenerationUpdate {
	gu.mutation.ClearNegativePrompts()
	return gu
}

// ClearGenerationModels clears the "generation_models" edge to the GenerationModel entity.
func (gu *GenerationUpdate) ClearGenerationModels() *GenerationUpdate {
	gu.mutation.ClearGenerationModels()
	return gu
}

// ClearUsers clears the "users" edge to the User entity.
func (gu *GenerationUpdate) ClearUsers() *GenerationUpdate {
	gu.mutation.ClearUsers()
	return gu
}

// ClearGenerationOutputs clears all "generation_outputs" edges to the GenerationOutput entity.
func (gu *GenerationUpdate) ClearGenerationOutputs() *GenerationUpdate {
	gu.mutation.ClearGenerationOutputs()
	return gu
}

// RemoveGenerationOutputIDs removes the "generation_outputs" edge to GenerationOutput entities by IDs.
func (gu *GenerationUpdate) RemoveGenerationOutputIDs(ids ...uuid.UUID) *GenerationUpdate {
	gu.mutation.RemoveGenerationOutputIDs(ids...)
	return gu
}

// RemoveGenerationOutputs removes "generation_outputs" edges to GenerationOutput entities.
func (gu *GenerationUpdate) RemoveGenerationOutputs(g ...*GenerationOutput) *GenerationUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveGenerationOutputIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GenerationUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks[int, GenerationMutation](ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GenerationUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GenerationUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GenerationUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GenerationUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := generation.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GenerationUpdate) check() error {
	if v, ok := gu.mutation.Status(); ok {
		if err := generation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Generation.status": %w`, err)}
		}
	}
	if _, ok := gu.mutation.DeviceInfoID(); gu.mutation.DeviceInfoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.device_info"`)
	}
	if _, ok := gu.mutation.SchedulersID(); gu.mutation.SchedulersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.schedulers"`)
	}
	if _, ok := gu.mutation.PromptsID(); gu.mutation.PromptsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.prompts"`)
	}
	if _, ok := gu.mutation.NegativePromptsID(); gu.mutation.NegativePromptsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.negative_prompts"`)
	}
	if _, ok := gu.mutation.GenerationModelsID(); gu.mutation.GenerationModelsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.generation_models"`)
	}
	if _, ok := gu.mutation.UsersID(); gu.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.users"`)
	}
	return nil
}

func (gu *GenerationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   generation.Table,
			Columns: generation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: generation.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Width(); ok {
		_spec.SetField(generation.FieldWidth, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedWidth(); ok {
		_spec.AddField(generation.FieldWidth, field.TypeInt, value)
	}
	if value, ok := gu.mutation.Height(); ok {
		_spec.SetField(generation.FieldHeight, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedHeight(); ok {
		_spec.AddField(generation.FieldHeight, field.TypeInt, value)
	}
	if value, ok := gu.mutation.InterferenceSteps(); ok {
		_spec.SetField(generation.FieldInterferenceSteps, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedInterferenceSteps(); ok {
		_spec.AddField(generation.FieldInterferenceSteps, field.TypeInt, value)
	}
	if value, ok := gu.mutation.GuidanceScale(); ok {
		_spec.SetField(generation.FieldGuidanceScale, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.AddedGuidanceScale(); ok {
		_spec.AddField(generation.FieldGuidanceScale, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.Seed(); ok {
		_spec.SetField(generation.FieldSeed, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedSeed(); ok {
		_spec.AddField(generation.FieldSeed, field.TypeInt, value)
	}
	if gu.mutation.SeedCleared() {
		_spec.ClearField(generation.FieldSeed, field.TypeInt)
	}
	if value, ok := gu.mutation.DurationMs(); ok {
		_spec.SetField(generation.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedDurationMs(); ok {
		_spec.AddField(generation.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := gu.mutation.Status(); ok {
		_spec.SetField(generation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := gu.mutation.FailureReason(); ok {
		_spec.SetField(generation.FieldFailureReason, field.TypeString, value)
	}
	if value, ok := gu.mutation.CountryCode(); ok {
		_spec.SetField(generation.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(generation.FieldUpdatedAt, field.TypeTime, value)
	}
	if gu.mutation.DeviceInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.DeviceInfoTable,
			Columns: []string{generation.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.DeviceInfoTable,
			Columns: []string{generation.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.SchedulersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.SchedulersTable,
			Columns: []string{generation.SchedulersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduler.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.SchedulersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.SchedulersTable,
			Columns: []string{generation.SchedulersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.PromptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.PromptsTable,
			Columns: []string{generation.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: prompt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.PromptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.PromptsTable,
			Columns: []string{generation.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: prompt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.NegativePromptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.NegativePromptsTable,
			Columns: []string{generation.NegativePromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: negativeprompt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.NegativePromptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.NegativePromptsTable,
			Columns: []string{generation.NegativePromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: negativeprompt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GenerationModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.GenerationModelsTable,
			Columns: []string{generation.GenerationModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationmodel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GenerationModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.GenerationModelsTable,
			Columns: []string{generation.GenerationModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationmodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.UsersTable,
			Columns: []string{generation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.UsersTable,
			Columns: []string{generation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGenerationOutputsIDs(); len(nodes) > 0 && !gu.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GenerationOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GenerationUpdateOne is the builder for updating a single Generation entity.
type GenerationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GenerationMutation
}

// SetWidth sets the "width" field.
func (guo *GenerationUpdateOne) SetWidth(i int) *GenerationUpdateOne {
	guo.mutation.ResetWidth()
	guo.mutation.SetWidth(i)
	return guo
}

// AddWidth adds i to the "width" field.
func (guo *GenerationUpdateOne) AddWidth(i int) *GenerationUpdateOne {
	guo.mutation.AddWidth(i)
	return guo
}

// SetHeight sets the "height" field.
func (guo *GenerationUpdateOne) SetHeight(i int) *GenerationUpdateOne {
	guo.mutation.ResetHeight()
	guo.mutation.SetHeight(i)
	return guo
}

// AddHeight adds i to the "height" field.
func (guo *GenerationUpdateOne) AddHeight(i int) *GenerationUpdateOne {
	guo.mutation.AddHeight(i)
	return guo
}

// SetInterferenceSteps sets the "interference_steps" field.
func (guo *GenerationUpdateOne) SetInterferenceSteps(i int) *GenerationUpdateOne {
	guo.mutation.ResetInterferenceSteps()
	guo.mutation.SetInterferenceSteps(i)
	return guo
}

// AddInterferenceSteps adds i to the "interference_steps" field.
func (guo *GenerationUpdateOne) AddInterferenceSteps(i int) *GenerationUpdateOne {
	guo.mutation.AddInterferenceSteps(i)
	return guo
}

// SetGuidanceScale sets the "guidance_scale" field.
func (guo *GenerationUpdateOne) SetGuidanceScale(f float64) *GenerationUpdateOne {
	guo.mutation.ResetGuidanceScale()
	guo.mutation.SetGuidanceScale(f)
	return guo
}

// AddGuidanceScale adds f to the "guidance_scale" field.
func (guo *GenerationUpdateOne) AddGuidanceScale(f float64) *GenerationUpdateOne {
	guo.mutation.AddGuidanceScale(f)
	return guo
}

// SetSeed sets the "seed" field.
func (guo *GenerationUpdateOne) SetSeed(ei enttypes.BigInt) *GenerationUpdateOne {
	guo.mutation.ResetSeed()
	guo.mutation.SetSeed(ei)
	return guo
}

// SetNillableSeed sets the "seed" field if the given value is not nil.
func (guo *GenerationUpdateOne) SetNillableSeed(ei *enttypes.BigInt) *GenerationUpdateOne {
	if ei != nil {
		guo.SetSeed(*ei)
	}
	return guo
}

// AddSeed adds ei to the "seed" field.
func (guo *GenerationUpdateOne) AddSeed(ei enttypes.BigInt) *GenerationUpdateOne {
	guo.mutation.AddSeed(ei)
	return guo
}

// ClearSeed clears the value of the "seed" field.
func (guo *GenerationUpdateOne) ClearSeed() *GenerationUpdateOne {
	guo.mutation.ClearSeed()
	return guo
}

// SetDurationMs sets the "duration_ms" field.
func (guo *GenerationUpdateOne) SetDurationMs(i int) *GenerationUpdateOne {
	guo.mutation.ResetDurationMs()
	guo.mutation.SetDurationMs(i)
	return guo
}

// AddDurationMs adds i to the "duration_ms" field.
func (guo *GenerationUpdateOne) AddDurationMs(i int) *GenerationUpdateOne {
	guo.mutation.AddDurationMs(i)
	return guo
}

// SetStatus sets the "status" field.
func (guo *GenerationUpdateOne) SetStatus(ge generation.Status) *GenerationUpdateOne {
	guo.mutation.SetStatus(ge)
	return guo
}

// SetFailureReason sets the "failure_reason" field.
func (guo *GenerationUpdateOne) SetFailureReason(s string) *GenerationUpdateOne {
	guo.mutation.SetFailureReason(s)
	return guo
}

// SetCountryCode sets the "country_code" field.
func (guo *GenerationUpdateOne) SetCountryCode(s string) *GenerationUpdateOne {
	guo.mutation.SetCountryCode(s)
	return guo
}

// SetPromptID sets the "prompt_id" field.
func (guo *GenerationUpdateOne) SetPromptID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetPromptID(u)
	return guo
}

// SetNegativePromptID sets the "negative_prompt_id" field.
func (guo *GenerationUpdateOne) SetNegativePromptID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetNegativePromptID(u)
	return guo
}

// SetModelID sets the "model_id" field.
func (guo *GenerationUpdateOne) SetModelID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetModelID(u)
	return guo
}

// SetSchedulerID sets the "scheduler_id" field.
func (guo *GenerationUpdateOne) SetSchedulerID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetSchedulerID(u)
	return guo
}

// SetUserID sets the "user_id" field.
func (guo *GenerationUpdateOne) SetUserID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetUserID(u)
	return guo
}

// SetDeviceInfoID sets the "device_info_id" field.
func (guo *GenerationUpdateOne) SetDeviceInfoID(u uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetDeviceInfoID(u)
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GenerationUpdateOne) SetUpdatedAt(t time.Time) *GenerationUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (guo *GenerationUpdateOne) SetDeviceInfo(d *DeviceInfo) *GenerationUpdateOne {
	return guo.SetDeviceInfoID(d.ID)
}

// SetSchedulersID sets the "schedulers" edge to the Scheduler entity by ID.
func (guo *GenerationUpdateOne) SetSchedulersID(id uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetSchedulersID(id)
	return guo
}

// SetSchedulers sets the "schedulers" edge to the Scheduler entity.
func (guo *GenerationUpdateOne) SetSchedulers(s *Scheduler) *GenerationUpdateOne {
	return guo.SetSchedulersID(s.ID)
}

// SetPromptsID sets the "prompts" edge to the Prompt entity by ID.
func (guo *GenerationUpdateOne) SetPromptsID(id uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetPromptsID(id)
	return guo
}

// SetPrompts sets the "prompts" edge to the Prompt entity.
func (guo *GenerationUpdateOne) SetPrompts(p *Prompt) *GenerationUpdateOne {
	return guo.SetPromptsID(p.ID)
}

// SetNegativePromptsID sets the "negative_prompts" edge to the NegativePrompt entity by ID.
func (guo *GenerationUpdateOne) SetNegativePromptsID(id uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetNegativePromptsID(id)
	return guo
}

// SetNegativePrompts sets the "negative_prompts" edge to the NegativePrompt entity.
func (guo *GenerationUpdateOne) SetNegativePrompts(n *NegativePrompt) *GenerationUpdateOne {
	return guo.SetNegativePromptsID(n.ID)
}

// SetGenerationModelsID sets the "generation_models" edge to the GenerationModel entity by ID.
func (guo *GenerationUpdateOne) SetGenerationModelsID(id uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetGenerationModelsID(id)
	return guo
}

// SetGenerationModels sets the "generation_models" edge to the GenerationModel entity.
func (guo *GenerationUpdateOne) SetGenerationModels(g *GenerationModel) *GenerationUpdateOne {
	return guo.SetGenerationModelsID(g.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (guo *GenerationUpdateOne) SetUsersID(id uuid.UUID) *GenerationUpdateOne {
	guo.mutation.SetUsersID(id)
	return guo
}

// SetUsers sets the "users" edge to the User entity.
func (guo *GenerationUpdateOne) SetUsers(u *User) *GenerationUpdateOne {
	return guo.SetUsersID(u.ID)
}

// AddGenerationOutputIDs adds the "generation_outputs" edge to the GenerationOutput entity by IDs.
func (guo *GenerationUpdateOne) AddGenerationOutputIDs(ids ...uuid.UUID) *GenerationUpdateOne {
	guo.mutation.AddGenerationOutputIDs(ids...)
	return guo
}

// AddGenerationOutputs adds the "generation_outputs" edges to the GenerationOutput entity.
func (guo *GenerationUpdateOne) AddGenerationOutputs(g ...*GenerationOutput) *GenerationUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddGenerationOutputIDs(ids...)
}

// Mutation returns the GenerationMutation object of the builder.
func (guo *GenerationUpdateOne) Mutation() *GenerationMutation {
	return guo.mutation
}

// ClearDeviceInfo clears the "device_info" edge to the DeviceInfo entity.
func (guo *GenerationUpdateOne) ClearDeviceInfo() *GenerationUpdateOne {
	guo.mutation.ClearDeviceInfo()
	return guo
}

// ClearSchedulers clears the "schedulers" edge to the Scheduler entity.
func (guo *GenerationUpdateOne) ClearSchedulers() *GenerationUpdateOne {
	guo.mutation.ClearSchedulers()
	return guo
}

// ClearPrompts clears the "prompts" edge to the Prompt entity.
func (guo *GenerationUpdateOne) ClearPrompts() *GenerationUpdateOne {
	guo.mutation.ClearPrompts()
	return guo
}

// ClearNegativePrompts clears the "negative_prompts" edge to the NegativePrompt entity.
func (guo *GenerationUpdateOne) ClearNegativePrompts() *GenerationUpdateOne {
	guo.mutation.ClearNegativePrompts()
	return guo
}

// ClearGenerationModels clears the "generation_models" edge to the GenerationModel entity.
func (guo *GenerationUpdateOne) ClearGenerationModels() *GenerationUpdateOne {
	guo.mutation.ClearGenerationModels()
	return guo
}

// ClearUsers clears the "users" edge to the User entity.
func (guo *GenerationUpdateOne) ClearUsers() *GenerationUpdateOne {
	guo.mutation.ClearUsers()
	return guo
}

// ClearGenerationOutputs clears all "generation_outputs" edges to the GenerationOutput entity.
func (guo *GenerationUpdateOne) ClearGenerationOutputs() *GenerationUpdateOne {
	guo.mutation.ClearGenerationOutputs()
	return guo
}

// RemoveGenerationOutputIDs removes the "generation_outputs" edge to GenerationOutput entities by IDs.
func (guo *GenerationUpdateOne) RemoveGenerationOutputIDs(ids ...uuid.UUID) *GenerationUpdateOne {
	guo.mutation.RemoveGenerationOutputIDs(ids...)
	return guo
}

// RemoveGenerationOutputs removes "generation_outputs" edges to GenerationOutput entities.
func (guo *GenerationUpdateOne) RemoveGenerationOutputs(g ...*GenerationOutput) *GenerationUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveGenerationOutputIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GenerationUpdateOne) Select(field string, fields ...string) *GenerationUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Generation entity.
func (guo *GenerationUpdateOne) Save(ctx context.Context) (*Generation, error) {
	guo.defaults()
	return withHooks[*Generation, GenerationMutation](ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GenerationUpdateOne) SaveX(ctx context.Context) *Generation {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GenerationUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GenerationUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GenerationUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := generation.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GenerationUpdateOne) check() error {
	if v, ok := guo.mutation.Status(); ok {
		if err := generation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Generation.status": %w`, err)}
		}
	}
	if _, ok := guo.mutation.DeviceInfoID(); guo.mutation.DeviceInfoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.device_info"`)
	}
	if _, ok := guo.mutation.SchedulersID(); guo.mutation.SchedulersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.schedulers"`)
	}
	if _, ok := guo.mutation.PromptsID(); guo.mutation.PromptsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.prompts"`)
	}
	if _, ok := guo.mutation.NegativePromptsID(); guo.mutation.NegativePromptsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.negative_prompts"`)
	}
	if _, ok := guo.mutation.GenerationModelsID(); guo.mutation.GenerationModelsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.generation_models"`)
	}
	if _, ok := guo.mutation.UsersID(); guo.mutation.UsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Generation.users"`)
	}
	return nil
}

func (guo *GenerationUpdateOne) sqlSave(ctx context.Context) (_node *Generation, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   generation.Table,
			Columns: generation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: generation.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Generation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generation.FieldID)
		for _, f := range fields {
			if !generation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != generation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Width(); ok {
		_spec.SetField(generation.FieldWidth, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedWidth(); ok {
		_spec.AddField(generation.FieldWidth, field.TypeInt, value)
	}
	if value, ok := guo.mutation.Height(); ok {
		_spec.SetField(generation.FieldHeight, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedHeight(); ok {
		_spec.AddField(generation.FieldHeight, field.TypeInt, value)
	}
	if value, ok := guo.mutation.InterferenceSteps(); ok {
		_spec.SetField(generation.FieldInterferenceSteps, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedInterferenceSteps(); ok {
		_spec.AddField(generation.FieldInterferenceSteps, field.TypeInt, value)
	}
	if value, ok := guo.mutation.GuidanceScale(); ok {
		_spec.SetField(generation.FieldGuidanceScale, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.AddedGuidanceScale(); ok {
		_spec.AddField(generation.FieldGuidanceScale, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.Seed(); ok {
		_spec.SetField(generation.FieldSeed, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedSeed(); ok {
		_spec.AddField(generation.FieldSeed, field.TypeInt, value)
	}
	if guo.mutation.SeedCleared() {
		_spec.ClearField(generation.FieldSeed, field.TypeInt)
	}
	if value, ok := guo.mutation.DurationMs(); ok {
		_spec.SetField(generation.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedDurationMs(); ok {
		_spec.AddField(generation.FieldDurationMs, field.TypeInt, value)
	}
	if value, ok := guo.mutation.Status(); ok {
		_spec.SetField(generation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := guo.mutation.FailureReason(); ok {
		_spec.SetField(generation.FieldFailureReason, field.TypeString, value)
	}
	if value, ok := guo.mutation.CountryCode(); ok {
		_spec.SetField(generation.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(generation.FieldUpdatedAt, field.TypeTime, value)
	}
	if guo.mutation.DeviceInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.DeviceInfoTable,
			Columns: []string{generation.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.DeviceInfoTable,
			Columns: []string{generation.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.SchedulersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.SchedulersTable,
			Columns: []string{generation.SchedulersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduler.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.SchedulersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.SchedulersTable,
			Columns: []string{generation.SchedulersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: scheduler.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.PromptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.PromptsTable,
			Columns: []string{generation.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: prompt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.PromptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.PromptsTable,
			Columns: []string{generation.PromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: prompt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.NegativePromptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.NegativePromptsTable,
			Columns: []string{generation.NegativePromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: negativeprompt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.NegativePromptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.NegativePromptsTable,
			Columns: []string{generation.NegativePromptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: negativeprompt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GenerationModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.GenerationModelsTable,
			Columns: []string{generation.GenerationModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationmodel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GenerationModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.GenerationModelsTable,
			Columns: []string{generation.GenerationModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationmodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.UsersTable,
			Columns: []string{generation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generation.UsersTable,
			Columns: []string{generation.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGenerationOutputsIDs(); len(nodes) > 0 && !guo.mutation.GenerationOutputsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GenerationOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generation.GenerationOutputsTable,
			Columns: []string{generation.GenerationOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Generation{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
